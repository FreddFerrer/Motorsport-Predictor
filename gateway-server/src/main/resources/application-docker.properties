spring.application.name=gateway-server
server.port=8080

predictions-service.url=http://predictions-service:8082
f1-service.url=http://f1-service:8083
users-service.url=http://users-service:8081
notifications-service.url=http://notifications-service:8084

#Eureka client
eureka.client.service-url.default-zone=http://${EUREKA_USER}:${EUREKA_PASSWORD}@eureka-server:8761/eureka
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}

#Users service routes
spring.cloud.gateway.routes[0].id=users-service
spring.cloud.gateway.routes[0].uri=http://users-service:8081
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/users/**, /api/groups/**

#Predictions service routes
spring.cloud.gateway.routes[1].id=predictions-service
spring.cloud.gateway.routes[1].uri=http://predictions-service:8082
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/predictions/**

#Eureka service routes
spring.cloud.gateway.routes[2].id=eureka-server
spring.cloud.gateway.routes[2].uri=http://eureka-server:8761
spring.cloud.gateway.routes[2].predicates[0]=Path=/eureka/web
spring.cloud.gateway.routes[2].filters[0]=SetPath=/

#Discovery Server Static routes
#Ruta para que se muestren las imagenes y recursos que se muestran en la interfaz web del serv. eureka.
spring.cloud.gateway.routes[3].id=discovery-service-static
spring.cloud.gateway.routes[3].uri=http://eureka-server:8761
spring.cloud.gateway.routes[3].predicates[0]=Path=/eureka/**

#F1 service routes
spring.cloud.gateway.routes[4].id=f1-service
spring.cloud.gateway.routes[4].uri=http://f1-service:8083
spring.cloud.gateway.routes[4].predicates[0]=Path=/api/f1/**

# Notification service routes
spring.cloud.gateway.routes[5].id=notifications-service
spring.cloud.gateway.routes[5].uri=http://notification-service:8084
spring.cloud.gateway.routes[5].predicates[0]=Path=/api/notifications/**

# Springdoc configuration
springdoc.enable-native-support=true
springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.config-url=/v3/api-docs/swagger-config

# Swagger UI URLs
springdoc.swagger-ui.urls[0].url=/v3/api-docs
springdoc.swagger-ui.urls[0].name=Motorsport Predictor API
springdoc.swagger-ui.urls[0].primaryName=API Gateway Service

springdoc.swagger-ui.urls[1].url=/f1-service/v3/api-docs
springdoc.swagger-ui.urls[1].name=F1 Service
springdoc.swagger-ui.urls[1].primaryName=F1 Service

springdoc.swagger-ui.urls[2].url=/users-service/v3/api-docs
springdoc.swagger-ui.urls[2].name=Users Service
springdoc.swagger-ui.urls[2].primaryName=Users Service

springdoc.swagger-ui.urls[3].url=/predictions-service/v3/api-docs
springdoc.swagger-ui.urls[3].name=Predictions Service
springdoc.swagger-ui.urls[3].primaryName=Predictions Service

#Filtros para definir el comportamiento de enrutamiento y manipulacion de sesiones y tokens de autenticacion.
spring.cloud.gateway.default-filters[0]=SaveSession
spring.cloud.gateway.default-filters[1]=TokenRelay

#Keycloak

spring.security.oauth2.client.provider.keycloak.issuer-uri=http://keycloak:9090/realms/microservices-motorsport-predictor-realm
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://keycloak:9090/realms/microservices-motorsport-predictor-realm/protocol/openid-connect/certs

spring.security.oauth2.client.registration.keycloak.provider=keycloak
spring.security.oauth2.client.registration.keycloak.scope=openid
spring.security.oauth2.client.registration.keycloak.client-id=${KC_CLIENT_ID}
spring.security.oauth2.client.registration.keycloak.client-secret=${KC_CLIENT_SECRET}
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.redirect-uri={baseUrl}/login/oauth2/code/keycloak

#Log
logging.level.root=info
logging.level.org.springframework.cloud.gateway=trace
logging.level.org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator=info
